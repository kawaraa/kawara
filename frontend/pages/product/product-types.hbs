const { Validator } = require("k-utilities");

module.exports = (types)=> `
<style>
  .types-wrapper {
    display: block;
    margin: 10px 0;
    overflow-x: scroll;
    max-height: 400px;
  }

  .type-label,
  .size-label {
    display: block;
    margin: 20px 0 10px 0;
  }

  .type-list {
    display: flex;
    flex-flow: row wrap;
    list-style: none;
  }

  .size-form {
    display: none;
  }

  .size-form.show {
    display: block;
    animation: opacity 0.5s ease;
  }

  .size-list {
    display: flex;
    flex-flow: row wrap;
    list-style: none;
  }

  .type-list-item {
    display: flex;
    margin: 0 10px 13px 2px;
  }

  .type-item {
    overflow: hidden;
    position: relative;
    display: flex;
    padding: 0;
    font-size: 15px;
    text-decoration: none;
    border-radius: 5px;
    box-shadow: 0 0 3px 0 var(--font);
    cursor: pointer;
  }

  .type-list-img {
    display: block;
    max-width: 60px;
    max-height: 60px;
  }

  .type-list-value {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 60px;
    max-width: 140px;
    max-height: 60px;
    padding: 3px;
    font-size: 15px;
    text-transform: uppercase;
  }

  .size-list-item {
    display: flex;
    margin: 0 10px 10px 2px;
  }

  .size-item {
    overflow: hidden;
    position: relative;
    display: flex;
    min-width: 60px;
    max-width: 140px;
    max-height: 60px;
    padding: 3px;
    justify-content: center;
    font-size: 15px;
    text-decoration: none;
    text-transform: uppercase;
    box-shadow: 0 0 3px 0 var(--font);
    border-radius: 5px;
    cursor: pointer;
  }

  .type-item:hover,
  .type-item.focus,
  .size-item:hover,
  .size-item.focus {
    box-shadow: 0 0 0 2px var(--red);
  }


  /* =============== Mobile, IPads & Tablet styles =============== */
  @media screen and (max-width: 850px) {
    .types-wrapper {
      margin: 10px 0 0 0;
    }

    .type-label,
    .size-label {
      margin: 0px 0 5px 0;
      font-size: 12px;
      font-weight: bold;
    }

    .type-list-img {
      max-width: 40px;
      max-height: 40px;
    }

    .type-list-value,
    .size-list-item {
      font-size: 12px;
    }
  }
</style>

<div class="types-wrapper">
  <p class="type-label">Type / Color / Material:</p>
  <form>
    <ul class="type-list">
      ${types.render(type => `
      <li class="type-list-item">
        <a href="javascript:void(0)" class="type-item">
          ${Validator.isUrl(type.type)? `
          <img src="${type.type}" alt="Product type, color and material" class="type-list-img" />
          ` : `
          <span class="type-list-value" style="background: ${type.type};">${type.type}</span>
          `}
          <input onclick="updateColor(this)" type="radio" name="type" value="${type.type}" class="type surface-input" />
        </a>
      </li>
      `)}
    </ul>
  </form>

  <p class="size-label">Size / Other:</p>
  ${types.render((type, i) => `
  <form class="size-form ${i !== 0 ? '' : 'show'}" id="${type.type}">
    <ul class="size-list">
      ${type.sizes.render(size => `
      <li class="size-list-item">
        <a href="javascript:void(0)" class="size-item">
          ${size.size}
          <input onclick="updateSize(this)" type="radio" name="size" value="${size.size}" data-price="${size.price}"
            data-in-stock="${size.inStock}" class="size surface-input" />
        </a>
      </li>
      `)}
    </ul>
  </form>
  `)}
</div>

<script>
  function updateColor(checkedType) {
    const types = Array.from(checkedType.form.type[0] ? checkedType.form.type : [checkedType.form.type])
    types.forEach(el => !el.checked && removeClass(el.parentElement, "focus"));

    queryAll(".size.surface-input").forEach(el => removeClass(el.parentElement, "focus") + (el.checked = false));

    addClass(checkedType.parentElement, "focus");

    queryAll(".size-form").forEach(el => removeClass(el, "show"));

    addClass(queryId(checkedType.value), "show");
    updateProductType({ type: checkedType.value, size: "", price: 0, quantity: 1 });

    const valueHolder = checkedType.parentElement.children[0];
    if (valueHolder.tagName === "IMG") query(".pictures.main").src = valueHolder.src
  };

  function updateSize(checkedSize) {
    const sizes = Array.from(checkedSize.form.size[0] ? checkedSize.form.size : [checkedSize.form.size])
    sizes.forEach(el => !el.checked && removeClass(el.parentElement, "focus"));

    addClass(checkedSize.parentElement, "focus");

    const { rate, currency } = getProductType();
    const price = Number.parseFloat(checkedSize.dataset.price);
    updateProductType({ size: checkedSize.value, price: price * rate, quantity: 1 });
    priceElement.innerText = priceToString(checkedSize.dataset.price);
    inStockElement.innerText = checkedSize.dataset.inStock
    quantityElement.max = checkedSize.dataset.inStock;
    quantityElement.value = 1;

    const valueHolder = checkedSize.parentElement.children[0];
    if (valueHolder.tagName === "IMG") query(".pictures.main").src = valueHolder.src
  };
</script>
`;